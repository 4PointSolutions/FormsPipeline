{
  "id" : "aef293b8-8deb-4b6b-8d5e-17d567d5c066",
  "name" : "services_outputservice_generateprintedoutput",
  "request" : {
    "url" : "/services/OutputService/GeneratePrintedOutput",
    "method" : "POST",
    "bodyPatterns" : [ {
      "contains" : "SampleForPs.xdp"
    } ]
  },
  "response" : {
    "status" : 200,
    "base64Body" : "",
    "headers" : {
      "Date" : "Thu, 19 Jan 2023 21:12:12 GMT",
      "X-Content-Type-Options" : "nosniff",
      "Set-Cookie" : "cq-authoring-mode=TOUCH; Path=/; Expires=Thu, 26-Jan-2023 21:12:12 GMT; Max-Age=604800",
      "Expires" : "Thu, 01 Jan 1970 00:00:00 GMT",
      "Content-Type" : "application/postscript"
    }
  },
  "uuid" : "aef293b8-8deb-4b6b-8d5e-17d567d5c066",
  "persistent" : true,
  "insertionIndex" : 11
}